name: "[INFRA] Terraform Pipeline"

on:
  pull_request:
    paths:
      - '**/*.tf'
  push:
    branches:
      - main

env:
  TF_VERSION: 1.6.6
  TF_WORKING_DIR: "pipelines/infra/terraform/"

# =====================
# LINT STAGE
# =====================
jobs:
  lint_fmt:
    runs-on: ubuntu-latest
    name: Terraform fmt
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - run: terraform fmt -check -recursive

  lint_tflint:
    runs-on: ubuntu-latest
    name: TFLint
    steps:
      - uses: actions/checkout@v4
      - uses: terraform-linters/setup-tflint@v4
      - run: tflint --recursive

  lint_infracost:
    runs-on: ubuntu-latest
    name: Infracost
    env:
      TF_WORKING_DIR: {{ env.TF_WORKING_DIR }}
      INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
    steps:
      - uses: actions/checkout@v4
  
      - uses: infracost/actions/setup@v2
        with:
          version: v0.10.42
          currency: USD
          github-token: ${{ secrets.GITHUB_TOKEN }}
  
      - run: infracost breakdown --path=${{ env.TF_WORKING_DIR }}


# =====================
# PLAN STAGE
# =====================
  plan:
    runs-on: ubuntu-latest
    name: Terraform Plan
    needs: [lint_fmt, lint_tflint, lint_infracost]
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - run: terraform -chdir=${{ env.TF_WORKING_DIR }} init
      - run: terraform -chdir=${{ env.TF_WORKING_DIR }} plan -out=tfplan
      - uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

# =====================
# SECURITY STAGE
# =====================
  security_conftest:
    runs-on: ubuntu-latest
    name: Conftest
    needs: plan
    steps:
      - uses: actions/checkout@v4
      - uses: instrumenta/conftest-action@v0.4.0
        with:
          files: ${{ env.TF_WORKING_DIR }}

  security_checkov:
    runs-on: ubuntu-latest
    name: Checkov
    needs: plan
    steps:
      - uses: actions/checkout@v4
      - uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.TF_WORKING_DIR }}

  security_tfsec:
    runs-on: ubuntu-latest
    name: tfsec
    needs: plan
    env:
      INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
        with:
          working_directory: ${{ env.TF_WORKING_DIR }}

  security_kics:
    runs-on: ubuntu-latest
    name: KICS
    needs: plan
    steps:
      - uses: actions/checkout@v4
      - uses: Checkmarx/kics-github-action@v2.1.12
        with:
          path: ${{ env.TF_WORKING_DIR }}

# =====================
# TAG STAGE
# =====================
  tag:
    runs-on: ubuntu-latest
    name: Tag Branch
    needs: [security_conftest, security_checkov, security_tfsec, security_kics]
    if: success()
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: infra-

# =====================
# APPLY STAGE
# =====================
  apply:
    runs-on: ubuntu-latest
    name: Terraform Apply
    needs: tag
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - uses: actions/download-artifact@v4
        with:
          name: tfplan
      - name: Terraform Apply
        uses: dflook/terraform-apply@v1
        with:
          path: ${{ env.TF_WORKING_DIR }}
          plan_path: tfplan
          auto_approve: true

# =====================
# NOTIFY STAGE
# =====================
  notify:
    runs-on: ubuntu-latest
    name: Notify Owners
    needs: [lint_fmt, lint_tflint, lint_infracost, plan, security_conftest, security_checkov, security_tfsec, security_kics, apply]
    if: failure() || success()
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Terraform pipeline completed for ${{ github.ref }} with status ${{ job.status }}"
            }

